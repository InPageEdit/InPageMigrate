{"version":3,"sources":["webpack://mediawiki-inpagemigrate/./module/getContent.js","webpack://mediawiki-inpagemigrate/./module/getPageData.js","webpack://mediawiki-inpagemigrate/./module/init.js","webpack://mediawiki-inpagemigrate/./module/jsonp.js","webpack://mediawiki-inpagemigrate/./module/pageExist.js","webpack://mediawiki-inpagemigrate/./module/postContent.js","webpack://mediawiki-inpagemigrate/./module/resolvePage.js","webpack://mediawiki-inpagemigrate/webpack/bootstrap","webpack://mediawiki-inpagemigrate/./index.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA,gBAAgB,mBAAO,CAAC,kCAAS;AACjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,C;;;;;;;;;;;;;ACVA;AACA,gBAAgB,mBAAO,CAAC,kCAAS;AACjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,C;;;;;;;;;;;;;ACTA,oBAAoB,mBAAO,CAAC,8CAAe;AAC3C,oBAAoB,mBAAO,CAAC,8CAAe;;AAE3C;;AAEA;AACA;AACA,SAAS,aAAa;;AAEtB;AACA;;AAEA;AACA,0BAA0B,iCAAiC;AAC3D;;AAEA,gCAAgC,2CAA2C;AAC3E,+BAA+B,sCAAsC;AACrE,iCAAiC,sDAAsD;AACvF,kCAAkC,wCAAwC;AAC1E,+BAA+B,4BAA4B;;AAE3D;AACA,eAAe,iBAAiB;AAChC,cAAc,oDAAoD;AAClE,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,gBAAgB,yBAAyB;AACzC,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe,GAAG,iBAAiB,GAAG,iBAAiB;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,QAAQ;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,KAAK,SAAS,GAAG,IAAI,MAAM,GAAG,mBAAmB;AAC/E;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,oBAAoB,mCAAmC,kBAAkB,iBAAiB;AAC1F;AACA;AACA;;AAEA;;AAEA,GAAG;AACH,C;;;;;;;;;;;;;ACtHA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,C;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C;;;;;;;;;;;;;ACTA,mBAAmB,mBAAO,CAAC,4CAAc;AACzC,kBAAkB,mBAAO,CAAC,0CAAa;AACvC,oBAAoB,mBAAO,CAAC,8CAAe;;AAE3C;;AAEA;;AAEA;;AAEA;AACA,yBAAyB,0DAA0D,GAAG;AACtF,sBAAsB,0DAA0D,GAAG;AACnF;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,C;;;;;;UCtDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,uCAAe;;AAEpC;;AAEA;;AAEA;AACA,SAAS,0DAA0D;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC,G","file":"InPageMigrate.js","sourcesContent":["module.exports = async (url, page) => {\r\n  const jsonp = require('./jsonp')\r\n  var data = await jsonp(url, {\r\n    format: 'json',\r\n    action: 'parse',\r\n    page,\r\n    prop: 'wikitext'\r\n  })\r\n  console.info('PageData', page, data)\r\n  return data\r\n}","module.exports = async (url, page) => {\r\n  const jsonp = require('./jsonp')\r\n  var data = await jsonp(url, {\r\n    format: 'json',\r\n    action: 'parse',\r\n    page,\r\n    prop: 'templates'\r\n  })\r\n  return data\r\n}","const getPageData = require('./getPageData')\r\nconst resolvePage = require('./resolvePage')\r\n\r\nmodule.exports = () => {\r\n\r\n  // 所需的常量\r\n  const fromUrl = window.InPageMigrateFrom\r\n  const { wgPageName } = mw.config.get()\r\n\r\n  // 获取 dom\r\n  var $mwContent = $('#mw-content-text')\r\n\r\n  // 构建 jQuery 对象\r\n  var $form = $('<div>', { class: 'InPageMigrate ipm-all' })\r\n  $form.appendTo($mwContent)\r\n\r\n  var $pageName = $('<input>', { class: 'ipm-pageName', value: wgPageName }),\r\n    $startBtn = $('<button>', { class: 'ipm-startBtn', text: '获取信息' }),\r\n    $postButton = $('<button>', { class: 'ipm-startBtn', text: '确认迁移', disabled: true }),\r\n    $detailArea = $('<section>', { class: 'ipm-detailArea', text: '操作日志' }),\r\n    $progressArea = $('<ul>', { class: 'ipm-progressArea' })\r\n\r\n  $form.append(\r\n    $('<h3>', { text: '快速迁移页面' }),\r\n    $('<p>', { text: '您正在从 API 接口为 ' + fromUrl + ' 的 wiki 迁移内容。' }),\r\n    $('<label>', { style: 'display: block' }).append(\r\n      '迁移：',\r\n      $pageName,\r\n      ' → ',\r\n      $('<i>', { text: wgPageName })\r\n    ),\r\n    $('<div>', { class: 'ipm-container' }).append(\r\n      $('<div>', { class: 'ipm-buttonArea' }).append(\r\n        $startBtn,\r\n        $postButton,\r\n      ),\r\n      $detailArea.append(\r\n        $progressArea\r\n      )\r\n    )\r\n  )\r\n\r\n  // @function pushProgress\r\n  function pushProgress(str) {\r\n    var now = new Date()\r\n    $progressArea.prepend(\r\n      $('<li>').append(\r\n        `[${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}] `,\r\n        str\r\n      )\r\n    )\r\n  }\r\n\r\n  // 获取信息\r\n  $startBtn.click(async function () {\r\n    // 初始化\r\n    $startBtn.attr('disabled', 'disabled')\r\n    $postButton.attr('disabled', 'disabled')\r\n    $form.data('pageList', [])\r\n    pushProgress('【等待】正在获取源页面(' + $pageName.val() + ')的基础信息……')\r\n\r\n    // 获取信息\r\n    const pageData = await getPageData(fromUrl, $pageName.val())\r\n\r\n    // 遇到错误\r\n    if (pageData.error || !pageData.parse) {\r\n      pushProgress('【错误】遇到以下问题：' + JSON.stringify(pageData))\r\n      $startBtn.attr('disabled', false).text('重试')\r\n      return\r\n    }\r\n\r\n    var { parse } = pageData\r\n\r\n    // 获取所需页面列表\r\n    $form.data('pageList', [$pageName.val()])\r\n    $.each(parse.templates, (_, item) => {\r\n      var pageList = $form.data('pageList')\r\n      if (item.exists === '') pageList.push(item['*'])\r\n      $form.data('pageList', pageList)\r\n    })\r\n\r\n    // 缓存所需页面\r\n    var neededPages = $form.data('pageList')\r\n\r\n    // 展示所需页面\r\n    pushProgress('【信息】成功获取页面信息，需要迁移以下页面：' + neededPages.join('、') + ' (共计' + neededPages.length + '个页面)')\r\n    pushProgress('【确认】请确认是否开始迁移……')\r\n\r\n    $startBtn.attr('disabled', false)\r\n    $postButton.attr('disabled', false)\r\n  })\r\n\r\n  $postButton.click(function () {\r\n    var neededPages = $form.data('pageList')\r\n    if (!neededPages) {\r\n      pushProgress('【错误】找不到需要的页面列表，请重新获取页面信息。')\r\n      return\r\n    }\r\n\r\n    async function loopResolve(i) {\r\n      var from = neededPages[i],\r\n        to = neededPages[i]\r\n      if (i === 0) to = wgPageName\r\n      pushProgress(`【信息】正在从 ${from} 迁移页面到 ${to} (${i + 1}/${neededPages.length})`)\r\n      await resolvePage(fromUrl, from, to, pushProgress)\r\n      if (i < (neededPages.length - 1)) {\r\n        loopResolve(i + 1)\r\n      } else {\r\n        pushProgress('【完成】页面迁移已完成，请刷新页面后检查。')\r\n        pushProgress(\r\n          $('<a>', { href: mw.util.getUrl(wgPageName, { action: 'purge' }), text: '立即刷新' })\r\n        )\r\n      }\r\n    }\r\n\r\n    loopResolve(0)\r\n\r\n  })\r\n}","module.exports = async (url, data = {}) => {\r\n  if (!url) return false\r\n  return $.ajax({\r\n    dataType: 'jsonp',\r\n    url,\r\n    data\r\n  })\r\n}","module.exports = async (page) => {\r\n  var data = await $.get(mw.config.get('wgScriptPath') + '/api.php', {\r\n    format: 'json',\r\n    action: 'parse',\r\n    prop: '',\r\n    page\r\n  })\r\n\r\n  if (data.error || !data.parse || data.parse.pageid === 0) return false\r\n  return true\r\n}","module.exports = (title, text) => {\r\n  return $.post(mw.config.get('wgScriptPath') + '/api.php', {\r\n    format: 'json',\r\n    action: 'edit',\r\n    token: mw.user.tokens.get('editToken'),\r\n    title,\r\n    text,\r\n    summary: '[InPageMigrate] 自动导入页面'\r\n  })\r\n}","const getContent = require('./getContent')\r\nconst pageExist = require('./pageExist')\r\nconst postContent = require('./postContent')\r\n\r\nmodule.exports = async (url, from, to, pushProgress) => {\r\n\r\n  var $def = $.Deferred()\r\n\r\n  var exist = await pageExist(to)\r\n\r\n  if (exist) {\r\n    var $yes = $('<a>', { class: 'ipm-existPageYes', text: '是', href: 'javascript:;' }),\r\n      $no = $('<a>', { class: 'ipm-existPageYes', text: '否', href: 'javascript:;' }),\r\n      $confirmBtn = $('<span>').append($yes, '/', $no)\r\n\r\n    $yes.click(function () {\r\n      $confirmBtn.hide()\r\n      doEdit()\r\n    })\r\n\r\n    $no.click(function () {\r\n      $confirmBtn.hide()\r\n      pushProgress('【信息】已跳过页面 ' + to)\r\n      $def.resolve()\r\n    })\r\n\r\n    pushProgress(\r\n      $('<span>').append(\r\n        '【警告】页面 <strong>' + to + '</strong> 已存在于本 wiki，是否覆盖？',\r\n        $confirmBtn\r\n      )\r\n    )\r\n  } else {\r\n    doEdit()\r\n  }\r\n\r\n  async function doEdit() {\r\n\r\n    var pageContent = await getContent(url, from)\r\n\r\n    var wikitext = pageContent.parse.wikitext\r\n\r\n    var ret = await postContent(to, wikitext['*'])\r\n\r\n    if (ret.error || ret.errors) {\r\n      pushProgress('【错误】保存页面 ' + to + '时出错。')\r\n      $def.resolve()\r\n    }\r\n    pushProgress('【成功】已从 ' + from + ' 保存内容到 ' + to)\r\n    $def.resolve()\r\n  }\r\n\r\n  return $def\r\n\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const init = require(\"./module/init\")\r\n\r\n!(async () => {\r\n\r\n  await mw.loader.using(['mediawiki.api', 'mediawiki.util', 'mediawiki.user'])\r\n\r\n  // 所需的常量\r\n  const { wgArticleId, wgAction, wgRelevantPageIsProbablyEditable } = mw.config.get()\r\n\r\n  // 如果不符合条件则直接结束\r\n  if (!window.InPageMigrateFrom) {\r\n    console.info('[InPageMigrate]', 'Please set API via window.InPageMigrateFrom')\r\n    return\r\n  }\r\n  if (mw.user.isAnon()) return // 未登录\r\n  if (wgAction !== 'view') return // 不是浏览状态\r\n  if (!wgRelevantPageIsProbablyEditable) return // 不可编辑\r\n  if (wgArticleId !== 0) return // 页面存在\r\n\r\n  // 走\r\n  init()\r\n\r\n})()"],"sourceRoot":""}